nasm -f elf64 -o test.o test.s
ld test.o -o test

 nasm -f elf64 -o ft_strlen.o ft_strlen.s
 gcc main.c ft_strlen.o -o test

 To print all system information and check if your system specification fits, run uname -a.

valgrind --leak-check=full ./program

 # Это правило с шаблоном (pattern rule).
# Оно определяет, как создавать объектные файлы (.o) из соответствующих им исходных файлов на C (.c). 
# %.o: Это цель правила (target pattern). Символ % - это подстановочный символ (wildcard), 
# %.c -  (prerequisite pattern). 
# Это команда (command), которая выполняется для достижения цели (создания .o файла).
# $<: Это автоматическая переменная (automatic variable) в make. Она представляет имя первой зависимости. В данном случае, < будет заменено на имя соответствующего .c файла. Например, если мы создаем pipex.o, то < будет равно pipex.c.
# -o $@: Это опция для компилятора, которая указывает имя выходного файла. $@ - это еще одна автоматическая переменная, которая представляет имя цели. В данном случае, @ будет заменено на имя соответствующего .o файла. Например, если цель — pipex.o, то @ будет равно pipex.o.
# Команда, которая будет выполнена: @$(GCC) $(CFLAGS) -c pipex.c -o pipex.o and it for all files

# название цели (target) в Makefile. Цель all является стандартной и обычно используется как основная цель, которую вы хотите построить при запуске команды make.
# Цель all часто включает в себя все необходимые шаги для сборки проекта, и ее можно рассматривать как "сборка всего".
# Это означает, что перед тем как завершить выполнение цели all, make должен убедиться, что цель $(NAME) (то есть исполняемый файл libasm) существует и актуален.
# Когда вы запускаете команду make, по умолчанию выполняется all.
#  говорит: "Чтобы завершить сборку цели all, сначала убедитесь, что исполняемый файл pipex существует и актуален." 


write:

    /*
    // https://acm.bsu.by/wiki/Unix2018/%D0%92%D0%B2%D0%BE%D0%B4-%D0%B2%D1%8B%D0%B2%D0%BE%D0%B4_%D0%BF%D1%80%D0%B8_%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D0%B8_POSIX_C_API

    WRITE FUNCTION
    Функция ft_write должна записывать данные либо в стандартный вывод (stdout),
     либо в открытый файловый дескриптор.
    return количество байтов, которые были фактически записаны в файл.
    Если произошла ошибка, возвращается -1, и переменная errno устанавливается 
    для указания причины ошибки (например, EBADF для недопустимого дескриптора 
    файла или ENOSPC для недостатка места на устройстве)

    FD
    Файловые дескрипторы передаются в функции read и write для выполнения ввода-вывода.

    STDIN and STDOUT - это потоки, стандарный ввод и вывод.

    
    
    */