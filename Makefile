NAME	=	libasm			# name of executable file 
SRC		=	main.c
ASM_SRC	=	ft_strlen.s			# list of source files
RM		=	rm -f
OBJ		=	$(SRC:.c=.o) $(ASM_SRC:.s=.o)	# list of object files
GCC		=	gcc
ASM		= 	nasm
CFLAGS	=	-Wall -Wextra -Werror
AFLAGS	=	-f elf64
GREEN	=	"\033[1;32m"
EOC		=	"\033[0m"
# https://makefiletutorial.com/
# Цель (Target) $(NAME)  представляет исполняемый файл.
# Зависимости $(OBJ) представляет объектные файлы (.o файлы), которые были созданы из  исходных файлов.
# Это правило говорит, что для создания исполняемого файла libasm необходимо сначала убедиться, что все объектные файлы актуальны. 
# Если какой-либо из .c файлов был изменен с момента последней компиляции, make автоматически пересоберет соответствующий объектный файл.
# Команда: чтобы создать исполняемый файл, объединяет объектные файлы и создает итоговый исполняемый файл.
$(NAME):	$(OBJ)
			$(GCC) $(CFLAGS) $(OBJ) -o $(NAME)
			@echo $(GREEN)SUCCESS$(EOC)
# Это правило с шаблоном (pattern rule).
# Оно определяет, как создавать объектные файлы (.o) из соответствующих им исходных файлов на C (.c). 
# %.o: Это цель правила (target pattern). Символ % - это подстановочный символ (wildcard), 
# который соответствует любой последовательности символов. %.o означает "любой файл с расширением .o".
# %.c -  (prerequisite pattern). 
# Это команда (command), которая выполняется для достижения цели (создания .o файла).
# $<: Это автоматическая переменная (automatic variable) в make. Она представляет имя первой зависимости. В данном случае, < будет заменено на имя соответствующего .c файла. Например, если мы создаем pipex.o, то < будет равно pipex.c.
# -o $@: Это опция для компилятора, которая указывает имя выходного файла. $@ - это еще одна автоматическая переменная, которая представляет имя цели. В данном случае, @ будет заменено на имя соответствующего .o файла. Например, если цель — pipex.o, то @ будет равно pipex.o.
# Команда, которая будет выполнена: @$(GCC) $(CFLAGS) -c pipex.c -o pipex.o and it for all files
%.o :		%.c
			$(GCC) $(CFLAGS) -c $< -o $@
# название цели (target) в Makefile. Цель all является стандартной и обычно используется как основная цель, которую вы хотите построить при запуске команды make без указания конкретной цели.
# Цель all часто включает в себя все необходимые шаги для сборки проекта, и ее можно рассматривать как "сборка всего".
# Это означает, что перед тем как завершить выполнение цели all, make должен убедиться, что цель $(NAME) (то есть исполняемый файл pipex) существует и актуален.
# Когда вы запускаете команду make, по умолчанию выполняется первая цель в Makefile. В этом случае первой целью является all.
#  говорит: "Чтобы завершить сборку цели all, сначала убедитесь, что исполняемый файл pipex существует и актуален." 
%.o : %.s
		$(ASM) $(AFLAGS) -o $@ $<

all	:		$(NAME)

clean:		
			$(RM) $(OBJ)
# Это объявление цели с именем fclean (полная очистка). Эта цель используется для удаления не только объектных файлов, но и других файлов, созданных в процессе сборки (например, исполняемого файла).
# clean: Это зависимость цели fclean. Это означает, что перед выполнением команды для fclean сначала будет выполнена команда для clean.
# Цель fclean сначала выполняет цель clean (удаляет объектные файлы), а потом удаляет исполняемый файл.
fclean:		clean
# Это объявление цели с именем re (rebuild, пересборка). Эта цель используется для полной пересборки проекта, начиная с очистки всех сгенерированных файлов.
re:			fclean all